>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

"""unit testing a class called BaseGeometry
some of these test include
recieving an empty string as the first argument
recieving an integer as the frst argument
recieving an negative integer as value
recieving a float as value
recieving a negative float"""

>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

bg.integer_validator
>>> bg.integer_validator("name", 2)
>>> bg.integer_validator("base", -3)
Traceback (most recent call last):
    ...
ValueError: base must be greater than 0
>>> bg.integer_validator("4", 4.0)
Traceback (most recent call last):
    ...
TypeError: 4 must be an integer

>>> bg.integer_validator("repl", -4.3)
Traceback (most recent call last):
    ...
TypeError: repl must be an integer
>>> bg.integer_validator("", 3)
>>> bg.integer_validator("base", "int")
Traceback (most recent call last):
    ...
TypeError: base must be an integer
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
    ...
TypeError: age must be an integer
>>> bg.integer_validator("age", True)
Traceback (most recent call last):
    ...
TypeError: age must be an integer
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
    ...
TypeError: age must be an integer
>>> bg.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0
>>> bg.integer_validator("new", [3])
Traceback (most recent call last):
    ...
TypeError: new must be an integer
>>> bg.integer_validator("list", {2, 3})
Traceback (most recent call last):
    ...
TypeError: list must be an integer
